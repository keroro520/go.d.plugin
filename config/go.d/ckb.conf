# vim: set ft=yaml:

# [ GLOBAL ]
# the default data collection frequency
update_every: 1 # in seconds

# autodetection_retry sets the job re-check interval in seconds.
# The job is not deleted if check fails.
# Attempts to start the job are made once every autodetection_retry.
# This feature is disabled by setting to `autodetection_retry: 0`.
# autodetection_retry: 0
autodetection_retry: 60 # in seconds

# Priority is the relative priority of the charts as rendered on the web page,
# lower numbers make the charts appear before the ones with higher numbers.
priority: 1

# The format of dim.Name: "<name>:<statistic algorirhm>(<metric field name>)"
jobs:
  - name: ckb
    # Enable logfile mode by assigning a logpath to run.log
    log_to_file: "{{ CKB_LOG_TO_FILE }}"
    # Enable journal mode by assigning a service name, like `ckb-node-8111`
    log_to_journal: "{{ CKB_LOG_TO_JOURNAL }}"

    charts:
      - fam: chain
        title: blocks
        units: number
        dims:
          - { name: "tip_number:last(chain.main_chain_tip)" }
          - { name: "tip_number.inc:inc(chain.main_chain_tip)" }
      - fam: chain
        title: headers
        units: number
        dims:
          - { name: "tip_number:last(chain.header_chain_tip)" }
          - { name: "tip_number.inc:inc(chain.header_chain_tip)" }
      - fam: chain
        title: reorg
        units: length
        dims:
          - { name: "attached:max(reorg.attached)" }
          - { name: "detached:max(reorg.detached)" }

      - fam: relay
        title: fresh
        units: count/s
        dims:
          - { name: "fresh_trasactions:sum(relay.fresh_transactions)" }
          - { name: "fresh_uncles:sum(relay.fresh_uncles)" }

      - fam: get_ancestor
        title: cost
        units: count/s
        dims:
          - { name: "steps:max(get_ancestor.steps)" }
          - { name: "steps.sum:sum(get_ancestor.steps)" }
          - { name: "elapsed:max(get_ancestor.elapsed)" }
          - { name: "elapsed.sum:sum(get_ancestor.elapsed)" }
      - fam: get_ancestor
        title: argument
        units: number
        dims:
          - { name: "target_number.min.min:min(get_ancestor.target_number)" }
          - { name: "target_number.max.max:max(get_ancestor.target_number)" }
          - { name: "ancestor_number.min:min(get_ancestor.ancestor_number)" }
          - { name: "ancestor_number.max:max(get_ancestor.ancestor_number)" }

      - fam: blocks_in_flight
        title: state
        units: count
        dims:
          - { name: "total.max:max(blocks_in_flight.total)" }
          - { name: "elapsed.max:max(blocks_in_flight.elapsed)" }

      - fam: received
        title: sync.received
        units: count/s
        dims:
          - { name: "received.GetHeaders:sum(received.GetHeaders)" }
          - { name: "received.SendHeaders:sum(received.SendHeaders)" }
          - { name: "received.GetBlocks:sum(received.GetBlocks)" }
          - { name: "received.SendBlock:sum(received.SendBlock)" }
          - { name: "received.InIBD:sum(received.InIBD)" }
      - fam: received
        title: relay.received
        units: count/s
        dims:
          - { name: "received.CompactBlock:sum(received.CompactBlock)" }
          - { name: "received.RelayTransactions:sum(received.RelayTransactions)" }
          - { name: "received.RelayTransactionHashes:sum(received.RelayTransactionHashes)" }
          - { name: "received.GetRelayTransactions:sum(received.GetRelayTransactions)" }
          - { name: "received.GetBlockTransactions:sum(received.GetBlockTransactions)" }
          - { name: "received.BlockTransactions:sum(received.BlockTransactions)" }
          - { name: "received.GetBlockProposal:sum(received.GetBlockProposal)" }
          - { name: "received.BlockProposal:sum(received.BlockProposal)" }

      - fam: sent
        title: sync.sent
        units: count/s
        dims:
          - { name: "sent.GetHeaders:sum(sent.GetHeaders)" }
          - { name: "sent.SendHeaders:sum(sent.SendHeaders)" }
          - { name: "sent.GetBlocks:sum(sent.GetBlocks)" }
          - { name: "sent.SendBlock:sum(sent.SendBlock)" }
          - { name: "sent.InIBD:sum(sent.InIBD)" }
      - fam: sent
        title: relay.sent
        units: count/s
        dims:
          - { name: "sent.CompactBlock:sum(sent.CompactBlock)" }
          - { name: "sent.RelayTransactions:sum(sent.RelayTransactions)" }
          - { name: "sent.RelayTransactionHashes:sum(sent.RelayTransactionHashes)" }
          - { name: "sent.GetRelayTransactions:sum(sent.GetRelayTransactions)" }
          - { name: "sent.GetBlockTransactions:sum(sent.GetBlockTransactions)" }
          - { name: "sent.BlockTransactions:sum(sent.BlockTransactions)" }
          - { name: "sent.GetBlockProposal:sum(sent.GetBlockProposal)" }
          - { name: "sent.BlockProposal:sum(sent.BlockProposal)" }
